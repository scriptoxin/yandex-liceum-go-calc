Мы продолжаем работать над вашим калькулятором.
Пользователь хочет считать арифметические выражения. Он вводит строку 2 + 2 * 2 и хочет получить в ответ 6. Но наши операции сложения и умножения (также деление и вычитания) выполняются "очень-очень" долго. Поэтому вариант, при котором пользователь делает http-запрос и получает в качестве ответа результат, невозможна. Более того: вычисление каждой такой операции в нашей "альтернативной реальности" занимает "гигантские" вычислительные мощности. Соответственно каждое действие мы должны уметь выполнять отдельно и масштабировать эту систему можем добавлением вычислительных мощностей в нашу систему в виде новых "машин". Поэтому пользователь может с какой-то периодичностью уточнять у сервера "не посчиталось ли выражение"? Если выражение наконец будет вычислено - то он получит результат. Помните, что некоторые части арифметического выражения можно вычислять параллельно.
Back-end часть состоит из 2 элементов:

Сервер, который принимает арифметическое выражение, переводит его в набор последовательных задач и обеспечивает порядок их выполнения. Далее будем называть его оркестратором.
Вычислитель, который может получить от оркестратора задачу, выполнить его и вернуть серверу результат. Далее будем называть его агентом.
Оркестратор
Сервер, который имеет следующие endpoint-ы:

Добавление вычисления арифметического выражения
curl --location 'localhost/api/v1/calculate' \
--header 'Content-Type: application/json' \
--data '{
  "expression": <строка с выражение>
}'
Коды ответа: 201 - выражение принято для вычисления, 422 - невалидные данные, 500 - что-то пошло не так

Тело ответа

{
    "id": <уникальный идентификатор выражения>
}
Получение списка выражений
curl --location 'localhost/api/v1/expressions'
Тело ответа

{
    "expressions": [
        {
            "id": <идентификатор выражения>,
            "status": <статус вычисления выражения>,
            "result": <результат выражения>
        },
        {
            "id": <идентификатор выражения>,
            "status": <статус вычисления выражения>,
            "result": <результат выражения>
        }
    ]
}
Коды ответа:

200 - успешно получен список выражений
500 - что-то пошло не так

Получение выражения по его идентификатору

curl --location 'localhost/api/v1/expressions/:id'
Коды ответа:

200 - успешно получено выражение
404 - нет такого выражения
500 - что-то пошло не так
Тело ответа

{
    "expression":
        {
            "id": <идентификатор выражения>,
            "status": <статус вычисления выражения>,
            "result": <результат выражения>
        }
}
Получение задачи для выполнения
curl --location 'localhost/internal/task'
Коды ответа:

200 - успешно получена задача
404 - нет задачи
500 - что-то пошло не так
Тело ответа

{
    "task":
        {
            "id": <идентификатор задачи>,
            "arg1": <имя первого аргумента>,
            "arg2": <имя второго аргумента>,
            "operation": <операция>,
            "operation_time": <время выполнения операции>
        }
}
Прием результата обработки данных.
curl --location 'localhost/internal/task' \
--header 'Content-Type: application/json' \
--data '{
  "id": 1,
  "result": 2.5
}'
Коды ответа:

200 - успешно записан результат
404 - нет такой задачи
422 - невалидные данные
500 - что-то пошло не так
Время выполнения операций задается переменными среды в миллисекундах
TIME_ADDITION_MS - время выполнения операции сложения в миллисекундах
TIME_SUBTRACTION_MS - время выполнения операции вычитания в миллисекундах
TIME_MULTIPLICATIONS_MS - время выполнения операции умножения в миллисекундах
TIME_DIVISIONS_MS - время выполнения операции деления в миллисекундах

Агент
Демон, который получает выражение для вычисления с сервера, вычисляет его и отправляет на сервер результат выражения.
При старте демон запускает несколько горутин, каждая из которых выступает в роли независимого вычислителя. Количество горутин регулируется переменной среды COMPUTING_POWER
Агент обязательно общается с оркестратором по http
Агент все время приходит к оркестратору с запросом "дай задачку поработать" (в ручку GET internal/task для получения задач). Оркестратор отдаёт задачу.
Агент производит вычисление и в ручку оркестратора (POST internal/task для приема результатов обработки данных) отдаёт результат